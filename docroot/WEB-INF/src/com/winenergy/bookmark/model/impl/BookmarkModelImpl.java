/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.winenergy.bookmark.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.winenergy.bookmark.model.Bookmark;
import com.winenergy.bookmark.model.BookmarkModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the Bookmark service. Represents a row in the &quot;WINenergy_Bookmark&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.winenergy.bookmark.model.BookmarkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookmarkImpl}.
 * </p>
 *
 * @author Fuping Ma
 * @see BookmarkImpl
 * @see com.winenergy.bookmark.model.Bookmark
 * @see com.winenergy.bookmark.model.BookmarkModel
 * @generated
 */
public class BookmarkModelImpl extends BaseModelImpl<Bookmark>
	implements BookmarkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bookmark model instance should use the {@link com.winenergy.bookmark.model.Bookmark} interface instead.
	 */
	public static final String TABLE_NAME = "WINenergy_Bookmark";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookmarkId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table WINenergy_Bookmark (bookmarkId LONG not null primary key,name VARCHAR(75) null,url VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table WINenergy_Bookmark";
	public static final String ORDER_BY_JPQL = " ORDER BY bookmark.bookmarkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WINenergy_Bookmark.bookmarkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.winenergy.bookmark.model.Bookmark"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.winenergy.bookmark.model.Bookmark"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.winenergy.bookmark.model.Bookmark"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.winenergy.bookmark.model.Bookmark"));

	public BookmarkModelImpl() {
	}

	public long getPrimaryKey() {
		return _bookmarkId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBookmarkId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bookmarkId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Bookmark.class;
	}

	public String getModelClassName() {
		return Bookmark.class.getName();
	}

	public long getBookmarkId() {
		return _bookmarkId;
	}

	public void setBookmarkId(long bookmarkId) {
		_columnBitmask = -1L;

		_bookmarkId = bookmarkId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	public void setUrl(String url) {
		_url = url;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Bookmark toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Bookmark)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Bookmark.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		BookmarkImpl bookmarkImpl = new BookmarkImpl();

		bookmarkImpl.setBookmarkId(getBookmarkId());
		bookmarkImpl.setName(getName());
		bookmarkImpl.setUrl(getUrl());

		bookmarkImpl.resetOriginalValues();

		return bookmarkImpl;
	}

	public int compareTo(Bookmark bookmark) {
		int value = 0;

		if (getBookmarkId() < bookmark.getBookmarkId()) {
			value = -1;
		}
		else if (getBookmarkId() > bookmark.getBookmarkId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Bookmark bookmark = null;

		try {
			bookmark = (Bookmark)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = bookmark.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BookmarkModelImpl bookmarkModelImpl = this;

		bookmarkModelImpl._originalName = bookmarkModelImpl._name;

		bookmarkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Bookmark> toCacheModel() {
		BookmarkCacheModel bookmarkCacheModel = new BookmarkCacheModel();

		bookmarkCacheModel.bookmarkId = getBookmarkId();

		bookmarkCacheModel.name = getName();

		String name = bookmarkCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			bookmarkCacheModel.name = null;
		}

		bookmarkCacheModel.url = getUrl();

		String url = bookmarkCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			bookmarkCacheModel.url = null;
		}

		return bookmarkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{bookmarkId=");
		sb.append(getBookmarkId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.winenergy.bookmark.model.Bookmark");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookmarkId</column-name><column-value><![CDATA[");
		sb.append(getBookmarkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Bookmark.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Bookmark.class
		};
	private long _bookmarkId;
	private String _name;
	private String _originalName;
	private String _url;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Bookmark _escapedModelProxy;
}